// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ReportComment extends ethereum.Event {
  get params(): ReportComment__Params {
    return new ReportComment__Params(this);
  }
}

export class ReportComment__Params {
  _event: ReportComment;

  constructor(event: ReportComment) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get report(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get reason(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ReportPost extends ethereum.Event {
  get params(): ReportPost__Params {
    return new ReportPost__Params(this);
  }
}

export class ReportPost__Params {
  _event: ReportPost;

  constructor(event: ReportPost) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get report(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get reason(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ReportReply extends ethereum.Event {
  get params(): ReportReply__Params {
    return new ReportReply__Params(this);
  }
}

export class ReportReply__Params {
  _event: ReportReply;

  constructor(event: ReportReply) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get report(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get reason(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class reports extends ethereum.SmartContract {
  static bind(address: Address): reports {
    return new reports("reports", address);
  }

  administration(): Address {
    let result = super.call("administration", "administration():(address)", []);

    return result[0].toAddress();
  }

  try_administration(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "administration",
      "administration():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  commentReport(param0: Bytes, param1: BigInt): boolean {
    let result = super.call(
      "commentReport",
      "commentReport(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_commentReport(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "commentReport",
      "commentReport(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  postReport(param0: Bytes, param1: BigInt): boolean {
    let result = super.call(
      "postReport",
      "postReport(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_postReport(param0: Bytes, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "postReport",
      "postReport(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  replyReport(param0: Bytes, param1: BigInt): boolean {
    let result = super.call(
      "replyReport",
      "replyReport(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_replyReport(param0: Bytes, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "replyReport",
      "replyReport(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ReportCommentCall extends ethereum.Call {
  get inputs(): ReportCommentCall__Inputs {
    return new ReportCommentCall__Inputs(this);
  }

  get outputs(): ReportCommentCall__Outputs {
    return new ReportCommentCall__Outputs(this);
  }
}

export class ReportCommentCall__Inputs {
  _call: ReportCommentCall;

  constructor(call: ReportCommentCall) {
    this._call = call;
  }

  get reporter(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get commentId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get report(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ReportCommentCall__Outputs {
  _call: ReportCommentCall;

  constructor(call: ReportCommentCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _administration(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ReportPostCall extends ethereum.Call {
  get inputs(): ReportPostCall__Inputs {
    return new ReportPostCall__Inputs(this);
  }

  get outputs(): ReportPostCall__Outputs {
    return new ReportPostCall__Outputs(this);
  }
}

export class ReportPostCall__Inputs {
  _call: ReportPostCall;

  constructor(call: ReportPostCall) {
    this._call = call;
  }

  get reporter(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get postId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get report(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ReportPostCall__Outputs {
  _call: ReportPostCall;

  constructor(call: ReportPostCall) {
    this._call = call;
  }
}

export class ReportReplyCall extends ethereum.Call {
  get inputs(): ReportReplyCall__Inputs {
    return new ReportReplyCall__Inputs(this);
  }

  get outputs(): ReportReplyCall__Outputs {
    return new ReportReplyCall__Outputs(this);
  }
}

export class ReportReplyCall__Inputs {
  _call: ReportReplyCall;

  constructor(call: ReportReplyCall) {
    this._call = call;
  }

  get reporter(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get replyId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get report(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ReportReplyCall__Outputs {
  _call: ReportReplyCall;

  constructor(call: ReportReplyCall) {
    this._call = call;
  }
}
